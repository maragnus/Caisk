@using Caisk.Users
<form @onsubmit="@FormSubmit">
    <MudDialog DefaultFocus="DefaultFocus.FirstChild">
        <DialogContent>
            <MudTextField T="string" @bind-Value="_password" Label="Password" ReadOnly Immediate Variant="Variant.Outlined" 
                          Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Refresh" AdornmentColor="Color.Primary" OnAdornmentClick="Recreate" />
            <MudDivider/>
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Disabled="!_isValid" OnClick="@FormSubmit">Save</MudButton>
            <MudButton Color="Color.Error" OnClick="@Cancel">Cancel</MudButton>
        </DialogActions>
    </MudDialog>
</form>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; init; } = default!;
    [Inject] public IUserStore UserStore { get; init; } = default!;

    [Parameter] public string Name { get; set; } = default!;

    private string _password = default!;
    private bool _isValid;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Recreate();
        _isValid = true;
    }
    
    private async Task FormSubmit()
    {
        if (string.IsNullOrWhiteSpace(_password))
            return;

        var user = await UserStore.Require(Name);
        user.PasswordHash = UserUtility.HashPassword(_password, user.Id);
        await UserStore.Store(user);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Close(DialogResult.Cancel());

    private void Recreate()
    {
        _password = UserUtility.GeneratePassword();
    }

}