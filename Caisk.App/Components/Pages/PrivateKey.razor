@page "/keys/{Name}"
@using Caisk.SecureShells
@inherits BaseProfileEditor<PrivateKeyProfile, IPrivateKeyStore>

@rendermode InteractiveServer

<MyMudProviders/>
<PageTitle>Private Key: @Name (Caisk)</PageTitle>
<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" ConfirmExternalNavigation="IsTouched"/>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-4">
    <MudText Typo="Typo.h4" GutterBottom="true">Private Key</MudText>
    <MudText Class="mb-8">Configure and activate Private Key</MudText>

    <MudPaper Class="pa-4">
        @if (IsLoading)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
        }
        else
        {
            <MudForm Model="Profile" @bind-IsValid="IsValid" @bind-IsTouched="IsTouched">
                <MudStack Spacing="4">
                    <MudTextField Label="Name" ReadOnly Value="Profile.Name"/>
                    <MudTextField Label="Type" ReadOnly Value="Profile.Type"/>
                    <MudDivider DividerType="DividerType.Middle" FlexItem/>
                    <MudField T="string" Label="Public Key">
                        <pre style="white-space: normal; word-wrap: break-word; word-break: break-all;">@Profile.ToPublicKey()</pre>
                    </MudField>

                    <MudField Label="Linked Secure Shells">
                        <MudChipSet>
                            @foreach (var ssh in _secureShells)
                            {
                                <MudChip Icon="@Icons.Material.Filled.Terminal" OnClick="@(() => GoToShell(ssh))">@ssh</MudChip>
                            }
                        </MudChipSet>
                    </MudField>

                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Spacing="4">
                        @if (!IsNew)
                        {
                            <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="@Delete" Color="Color.Error">Delete</MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.Edit" OnClick="@Rename" Color="Color.Warning">Rename</MudButton>
                            <MudDivider Vertical DividerType="DividerType.Middle" FlexItem/>
                        }
                        <MudButton OnClick="@Cancel" Color="Color.Default">Back</MudButton>
                    </MudStack>
                </MudStack>
            </MudForm>
        }
    </MudPaper>
</MudContainer>

@code {
    private string[] _secureShells = Array.Empty<string>();
    [Inject] public ISecureShellStore SecureShellStore { get; init; } = default!;

    protected override async Task OnSafeParametersSetAsync()
    {
        await base.OnSafeParametersSetAsync();
        var secureShells = await SecureShellStore.GetUsingPrivateKey(Profile.Name);
        _secureShells = secureShells.Select(ssh => ssh.Name).ToArray();
    }

    private void GoToShell(string ssh) =>
        NavigationManager.NavigateToProfile<SecureShellProfile>(ssh);

    protected override Task StoreProfile(PrivateKeyProfile save) =>
        Task.CompletedTask;

}