@page "/apps/{ParentName}/{Name}/deploy"
@using Caisk.Deploy
@using Caisk.Applications
@inherits BaseProfileEditor<Caisk.Applications.ApplicationEnvironmentProfile, Caisk.Applications.IApplicationEnvironmentStore>

@rendermode InteractiveServer

<MyMudProviders/>
<PageTitle>Deploy: @ParentName/@Name (Caisk)</PageTitle>
<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" ConfirmExternalNavigation="IsTouched"/>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudText Typo="Typo.h4" GutterBottom="true">Deploy</MudText>
    <MudText Class="mb-8">Deploy an application environment</MudText>

    <MudPaper Class="pa-4">
        @if (IsLoading)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
        }
        else
        {
            <MudStack Spacing="4">
                <MudTextField Label="Name" ReadOnly Value="Profile.Name"/>
                <MudTextField Label="Application" ReadOnly Value="Profile.ParentName"/>

                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Spacing="4">
                    <MudButton OnClick="@DeployApp" Color="Color.Info" StartIcon="@Icons.Material.Filled.RocketLaunch">Deploy</MudButton>
                    <MudDivider Vertical DividerType="DividerType.Middle" FlexItem/>
                    <MudButton StartIcon="@Common.ApplicationEnvironmentProfileIcon" OnClick="@GoToEnvironment" Color="Color.Default">Environment</MudButton>
                    <MudButton StartIcon="@Common.ApplicationProfileIcon" OnClick="@GoToApplication" Color="Color.Default">Application</MudButton>
                </MudStack>
            </MudStack>
        }
    </MudPaper>
</MudContainer>

@code {
    [Inject] DeploymentManager DeploymentManager { get; set; } = default!;

    private void GoToEnvironment() =>
        NavigationManager.NavigateToProfile<ApplicationEnvironmentProfile>(Profile.Name, Profile.ParentName);

    private void GoToApplication() =>
        NavigationManager.NavigateToProfile<ApplicationProfile>(Profile.ParentName!);

    async Task DeployApp()
    {
        await SafeActionAsync(async () =>
        {
            await DeploymentManager.DeployApplication(Profile.ParentName!, Profile.Name);
            await DialogService.ShowMessageBox($"Deploy {Profile.ParentName} {Profile.Name}", "Deployment complete");
        });
    }

}