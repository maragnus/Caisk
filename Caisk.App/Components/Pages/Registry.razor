@page "/registries/{Name}"
@using Caisk.Docker
@inherits BaseProfileEditor<Caisk.Docker.RegistryProfile, Caisk.Docker.IRegistryStore>

@rendermode InteractiveServer

<MyMudProviders/>
<PageTitle>Docker Registry (Caisk)</PageTitle>
<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" ConfirmExternalNavigation="IsTouched"/>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-4">
    <MudText Typo="Typo.h4" GutterBottom="true">Docker Registry</MudText>
    <MudText Class="mb-8">Configure docker registry connection</MudText>

    <MudPaper Class="pa-4">

        @if (IsLoading)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
        }
        else
        {
            <MudForm Model="Profile" @bind-IsValid="IsValid" @bind-IsTouched="IsTouched">
                <MudStack Spacing="4">
                    <MudTextField Label="Name" ReadOnly Value="Profile.Name"/>
                    <MudTextField Label="Host Name" Immediate Required InputType="InputType.Text" @bind-Value="Profile.HostName"/>
                    <MudRadioGroup T="RegistryAuthenticationType" @bind-Value="Profile.AuthenticationType">
                        <MudRadio Option="@RegistryAuthenticationType.Anonymous">Anonymous</MudRadio>
                        <MudRadio Option="@RegistryAuthenticationType.Basic">Basic</MudRadio>
                        <MudRadio Option="@RegistryAuthenticationType.Bearer">Bearer</MudRadio>
                    </MudRadioGroup>
                    @if (Profile.AuthenticationType != RegistryAuthenticationType.Anonymous)
                    {
                        <MudTextField Label="User Name" Immediate Required="Profile.AuthenticationType != RegistryAuthenticationType.Anonymous" InputType="InputType.Text" @bind-Value="Profile.UserName"/>
                    }
                    @if (Profile.AuthenticationType == RegistryAuthenticationType.Basic)
                    {
                        <MudTextField Label="Password" Immediate InputType="InputType.Password" @bind-Value="Profile.Password"/>
                    }
                    @if (Profile.AuthenticationType == RegistryAuthenticationType.Bearer)
                    {
                        <MudTextField Label="Bearer Token" Immediate Required InputType="InputType.Password" @bind-Value="Profile.BearerToken"/>
                    }
                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Spacing="4">
                        @if (!IsNew)
                        {
                            <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="@Delete" Color="Color.Error">Delete</MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.Edit" OnClick="@Rename" Color="Color.Warning">Rename</MudButton>
                            <MudDivider Vertical DividerType="DividerType.Middle" FlexItem/>
                        }
                        <MudButton OnClick="@Cancel" Color="Color.Default">Cancel</MudButton>
                        <MudButton StartIcon="@Icons.Material.Filled.Save" OnClick="@SaveAndClose" Color="Color.Primary" Variant="Variant.Filled" Disabled="!IsValid">Store</MudButton>
                    </MudStack>
                </MudStack>
            </MudForm>
        }
    </MudPaper>
</MudContainer>

@code {

    protected override Task StoreProfile(RegistryProfile save)
    {
        save.HostName = Profile.HostName;
        save.AuthenticationType = Profile.AuthenticationType;
        save.UserName = Profile.UserName;
        save.Password = Profile.Password;
        save.BearerToken = Profile.BearerToken;
        return Task.CompletedTask;
    }

}