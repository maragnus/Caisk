@page "/apps/{ParentName}/{Name}"
@using Caisk.GitHub
@using Caisk.Managers.Mongo
@using Caisk.SecureShells
@using Caisk.Applications
@using Caisk.Docker
@inherits BaseProfileEditor<Caisk.Applications.ApplicationEnvironmentProfile, Caisk.Applications.IApplicationEnvironmentStore>

@rendermode InteractiveServer

<MyMudProviders/>
<PageTitle>Application: @ParentName/@Name (Caisk)</PageTitle>
<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" ConfirmExternalNavigation="IsTouched"/>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudText Typo="Typo.h4" GutterBottom="true">Application Environment</MudText>
    <MudText Class="mb-8">Configure, update, deploy application environment</MudText>

    <MudPaper Class="pa-4">
        @if (IsLoading)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
        }
        else
        {
            <MudForm Model="Profile" @bind-IsValid="IsValid" @bind-IsTouched="IsTouched">
                <MudStack Spacing="4">
                    <MudTextField Label="Name" ReadOnly Value="Profile.Name"/>
                    <MudTextField Label="Application" ReadOnly Value="Profile.ParentName"/>
                    <MudTextField Label="Entry Urls (semi-colon delimited)" @bind-Value="Profile.EntryUrl"/>
                    <MudTextField Label="Health Check Url" @bind-Value="Profile.HealthCheckUrl"/>
                    <ProfileSelector T="MongoDatabaseProfile" @bind-Value="Profile.MongoDatabaseName"/>
                    <ProfileSelector T="SecureShellProfile" @bind-Value="Profile.SecureShellName"/>
                    <MudGrid>
                        @foreach (var service in Profile.Services ?? [])
                        {
                            <MudItem sm="6" md="3">
                                <MudTextField T="string" Value="@service.Name" ReadOnly Label="Service"/>
                            </MudItem>
                            <MudItem sm="6" md="4">
                                <ProfileSelector T="RegistryProfile" @bind-Value="@service.RegistryName" Label="Registry"/>
                            </MudItem>
                            <MudItem sm="6" md="4">
                                <ProfileSelector T="GitHubRepositoryProfile" @bind-Value="@service.RepositoryName" Label="Repository"/>
                            </MudItem>
                            <MudItem sm="6" md="4">
                                <MudSelect T="string" @bind-Value="@service.ActionId" Label="Workflow ID">
                                    <MudSelectItem T="string" Value="@null">None</MudSelectItem>
                                    @foreach (var workflow in GetWorkflows(service.RepositoryName))
                                    {
                                        <MudSelectItem Value="@workflow.Id">@workflow.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem sm="6" md="3">
                                <MudTextField T="string" Value="@service.Image.ToString()" ReadOnly Label="Image"/>
                            </MudItem>
                        }
                    </MudGrid>
                    <MudInputLabel Variant="Variant.Text">Deployed Files</MudInputLabel>
                    <MudTable T="DeployedFile" Items="_deployedFiles" Elevation="0" Dense Hover OnRowClick="@OpenDeployedFile" Style="overflow-y: hidden">
                        <HeaderContent>
                            <MudTh>File Name</MudTh>
                            <MudTh>Base64</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                <MudStack Row Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                                    <MudIcon Icon="@Icons.Material.Filled.AttachFile" Style="font-size: inherit"/>
                                    @context.FileName
                                </MudStack>
                            </MudTd>
                            <MudTd>
                                <MudCheckBox T="bool" @bind-Checked="@context.Base64"/>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                    <div>
                        <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="@AddDeployedFile" Color="Color.Primary">Add Deployed File</MudButton>
                    </div>
                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Spacing="4">
                        <MudButton StartIcon="@Icons.Material.Filled.RocketLaunch" OnClick="@Deploy" Color="Color.Tertiary">Deploy</MudButton>
                        <MudDivider Vertical DividerType="DividerType.Middle" FlexItem/>
                        @if (!IsNew)
                        {
                            <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="@Delete" Color="Color.Error">Delete</MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.Edit" OnClick="@Rename" Color="Color.Warning">Rename</MudButton>
                            <MudDivider Vertical DividerType="DividerType.Middle" FlexItem/>
                        }
                        <MudButton OnClick="@Cancel" Color="Color.Default">Cancel</MudButton>
                        <MudButton StartIcon="@Icons.Material.Filled.Save" OnClick="@SaveAndClose" Color="Color.Primary" Variant="Variant.Filled" Disabled="!IsValid">Store</MudButton>
                    </MudStack>
                </MudStack>
            </MudForm>
        }
    </MudPaper>
</MudContainer>

@code {
    [Inject] IGitHubRepositoryStore GitHubRepositoryStore { get; init; } = default!;

    readonly Dictionary<string, GitHubWorkflow[]> _workflows = new();
    List<DeployedFile> _deployedFiles = [];

    protected override async Task OnSafeInitializedAsync()
    {
        await base.OnSafeInitializedAsync();
        var repos = await GitHubRepositoryStore.GetAll();
        foreach (var repo in repos)
            _workflows.Add(repo.Name, repo.Workflows.ToArray());
    }

    protected override async Task OnSafeParametersSetAsync()
    {
        await base.OnSafeParametersSetAsync();
        _deployedFiles.Clear();
        _deployedFiles.Add(new DeployedFile() { FileName = Common.DockerComposeYaml });
        _deployedFiles.AddRange(Profile.Files);
    }

    protected override async Task Save()
    {
        await SafeActionAsync(async () =>
        {
            if (IsNew)
            {
                await ProfileStore.Store(Profile);
                return;
            }

            var profile = await ProfileStore.Require(Name!, ParentName);
            profile.EntryUrl = Profile.EntryUrl;
            profile.HealthCheckUrl = Profile.HealthCheckUrl;
            profile.MongoDatabaseName = Profile.MongoDatabaseName;
            profile.SecureShellName = Profile.SecureShellName;
            profile.Services.Clear();
            profile.Services.AddRange(Profile.Services);
            foreach (var src in Profile.Files)
            {
                var dest = profile.Files.FirstOrDefault(file => file.FileName == src.FileName);
                if (dest != null) dest.Base64 = src.Base64;
            }

            await ProfileStore.Store(profile);
            Profile = profile;
        });
    }

    private async Task Deploy()
    {
        await Save();
        NavigationManager.NavigateTo(Common.ProfileUrl<ApplicationEnvironmentProfile>(Profile.Name, Profile.ParentName) + "/deploy");
    }

    private IEnumerable<GitHubWorkflow> GetWorkflows(string? gitHubProfileName)
    {
        if (!string.IsNullOrWhiteSpace(gitHubProfileName)
            && _workflows.TryGetValue(gitHubProfileName, out var result))
            return result;
        return [];
    }

    private async Task AddDeployedFile()
    {
        var names = _deployedFiles.Select(p => p.FileName).ToArray();
        var parameters = new DialogParameters { { nameof(NewFileModal.Names), names } };
        var modal = await DialogService.ShowAsync<NewFileModal>("Add Deployed File", parameters);
        var result = await modal.Result;
        if (result.Canceled) return;
        var response = (Tuple<string, bool>)result.Data;

        await Save();

        var profile = await ProfileStore.Require(Name!, ParentName);
        profile.Files.Add(new DeployedFile() { FileName = response.Item1, Base64 = response.Item2 });
        await ProfileStore.Store(profile);
        Profile = profile;

        OpenDeployedFile(response.Item1);
    }

    private void OpenDeployedFile(string fileName)
    {
        if (fileName == Common.DockerComposeYaml)
            NavigationManager.NavigateTo(Common.ProfileUrl<ApplicationEnvironmentProfile>(Profile.Name, Profile.ParentName) + "/docker-compose");
        else
            NavigationManager.NavigateTo(Common.ProfileUrl<ApplicationEnvironmentProfile>(Profile.Name, Profile.ParentName) + $"/files/{fileName}");
    }

    private async Task OpenDeployedFile(TableRowClickEventArgs<DeployedFile> arg)
    {
        await Save();
        OpenDeployedFile(arg.Item.FileName);
    }

}