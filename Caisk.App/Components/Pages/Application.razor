@page "/apps/{Name}"
@using Caisk.Applications
@using Caisk.Docker
@using Caisk.GitHub
@inherits BaseProfileEditor<ApplicationProfile, IApplicationStore>

@rendermode InteractiveServer

<MyMudProviders/>
<PageTitle>Application: @Name (Caisk)</PageTitle>
<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" ConfirmExternalNavigation="IsTouched"/>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudText Typo="Typo.h4" GutterBottom="true">Application</MudText>
    <MudText Class="mb-8">Configure applications and their environments</MudText>

    <MudPaper Class="pa-4">
        @if (IsLoading)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
        }
        else
        {
            <MudForm Model="Profile" @bind-IsValid="IsValid" @bind-IsTouched="IsTouched">
                <MudStack Spacing="4">
                    <MudTextField Label="Name" ReadOnly Value="Profile.Name"/>
                    <ProfileSelector T="RegistryProfile" Label="Container Registry" @bind-Value="Profile.RegistryName" Items="_registries" Icon="@Icons.Material.Filled.DirectionsBoat" OpenClicked="OpenRegistry"/>
                    <ProfileSelector T="GitHubRepositoryProfile" Label="GitHub Repository" @bind-Value="Profile.GitHubRepositoryName" Items="_repositories" Icon="@Icons.Custom.Brands.GitHub" OpenClicked="OpenGitHub"/>
                    <MudTable T="ApplicationEnvironmentProfile" Items="_environments" Hover="true" SortLabel="Sort By" Elevation="0" OnRowClick="e => OpenEnvironment(e.Item.Name)">
                        <HeaderContent>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<ApplicationEnvironmentProfile, object>(x => x.Name)">Name</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<ApplicationEnvironmentProfile, object>(x => x.Created)">Added</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<ApplicationEnvironmentProfile, object>(x => x.Updated)">Updated</MudTableSortLabel>
                            </MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@context.Name</MudTd>
                            <MudTd DataLabel="Added">@Common.Date(context.Created)</MudTd>
                            <MudTd DataLabel="Updated">@Common.Date(context.Updated)</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new[] { 50, 100 }"/>
                        </PagerContent>
                    </MudTable>
                    <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="@AddClick" Color="Color.Primary">Add Environment</MudButton>
                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Spacing="4">
                        @if (!IsNew)
                        {
                            <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="@Delete" Color="Color.Error">Delete</MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.Edit" OnClick="@Rename" Color="Color.Warning">Rename</MudButton>
                            <MudDivider Vertical DividerType="DividerType.Middle" FlexItem/>
                        }
                        <MudButton OnClick="@Cancel" Color="Color.Default">Cancel</MudButton>
                        <MudButton StartIcon="@Icons.Material.Filled.Save" OnClick="@SaveAndClose" Color="Color.Primary" Variant="Variant.Filled" Disabled="!IsValid">Store</MudButton>
                    </MudStack>
                </MudStack>
            </MudForm>
        }
    </MudPaper>
</MudContainer>

@code {
    private string[] _registries = Array.Empty<string>(), _repositories = Array.Empty<string>();
    private ApplicationEnvironmentProfile[] _environments = Array.Empty<ApplicationEnvironmentProfile>();

    [Inject] public IApplicationEnvironmentStore EnvironmentStore { get; init; } = default!;
    [Inject] public IGitHubRepositoryStore GitHubRepositoryStore { get; init; } = default!;
    [Inject] public IRegistryStore RegistryStore { get; init; } = default!;

    protected override async Task OnSafeInitializedAsync()
    {
        await base.OnSafeInitializedAsync();
        _registries = await RegistryStore.GetNames();
        _repositories = await GitHubRepositoryStore.GetNames();
    }

    protected override async Task OnSafeParametersSetAsync()
    {
        await base.OnSafeParametersSetAsync();
        _environments = await EnvironmentStore.GetAll(Profile.Name);
    }

    private void OpenGitHub(string profileName) => NavigationManager.NavigateToProfile<GitHubRepositoryProfile>(profileName);
    private void OpenRegistry(string profileName) => NavigationManager.NavigateToProfile<RegistryProfile>(profileName);
    private void OpenEnvironment(string profileName) => NavigationManager.NavigateToProfile<ApplicationEnvironmentProfile>(profileName, Profile.Name);

    private async Task AddClick()
    {
        var names = await EnvironmentStore.GetNames(Profile.Name);
        var parameters = new DialogParameters { { nameof(NewProfileModal.Names), names } };
        var modal = await DialogService.ShowAsync<NewProfileModal>("Add Environment", parameters);
        var result = await modal.Result;
        if (result.Canceled) return;
        await Save();
        OpenEnvironment((string)result.Data);
    }

}